// Mocks generated by Mockito 5.4.5 from annotations
// in dhan_saarthi/test/feature/auth/domain/repository/mock_auth_repo.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dhan_saarthi/core/failure.dart' as _i5;
import 'package:dhan_saarthi/feature/auth/domain/entities/phone_number.dart'
    as _i6;
import 'package:dhan_saarthi/feature/auth/domain/entities/phone_otp.dart'
    as _i8;
import 'package:dhan_saarthi/feature/auth/domain/entities/user_entity.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

import 'mock_auth_repo.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MyAuthRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyAuthRepo extends _i1.Mock implements _i3.MyAuthRepo {
  MockMyAuthRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> sendOTP(
    _i6.PhoneNumber? phoneNo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#sendOTP, [phoneNo]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i5.Failure, _i2.Unit>(
                this,
                Invocation.method(#sendOTP, [phoneNo]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.UserEntity>> verifyOTP(
    _i8.PhoneOTP? otp,
    _i6.PhoneNumber? phone,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#verifyOTP, [otp, phone]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i7.UserEntity>>.value(
                  _FakeEither_0<_i5.Failure, _i7.UserEntity>(
                    this,
                    Invocation.method(#verifyOTP, [otp, phone]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i7.UserEntity>>);

  @override
  _i2.Either<_i5.Failure, _i7.UserEntity> currentuser() =>
      (super.noSuchMethod(
            Invocation.method(#currentuser, []),
            returnValue: _FakeEither_0<_i5.Failure, _i7.UserEntity>(
              this,
              Invocation.method(#currentuser, []),
            ),
          )
          as _i2.Either<_i5.Failure, _i7.UserEntity>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i5.Failure, _i2.Unit>(
                this,
                Invocation.method(#signOut, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
