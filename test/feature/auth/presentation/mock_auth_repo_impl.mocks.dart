// Mocks generated by Mockito 5.4.5 from annotations
// in dhan_saarthi/test/feature/auth/presentation/mock_auth_repo_impl.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dhan_saarthi/core/failure.dart' as _i7;
import 'package:dhan_saarthi/feature/auth/data/data_sources/auth_remote_source.dart'
    as _i2;
import 'package:dhan_saarthi/feature/auth/domain/entities/phone_number.dart'
    as _i8;
import 'package:dhan_saarthi/feature/auth/domain/entities/phone_otp.dart'
    as _i10;
import 'package:dhan_saarthi/feature/auth/domain/entities/user_entity.dart'
    as _i9;
import 'package:dhan_saarthi/feature/auth/domain/repository/auth_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

import 'mock_auth_repo_impl.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRemoteSource_0 extends _i1.SmartFake
    implements _i2.AuthRemoteSource {
  _FakeAuthRemoteSource_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthRepository_2 extends _i1.SmartFake
    implements _i4.AuthRepository {
  _FakeAuthRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MyAuthRepoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyAuthRepoImpl extends _i1.Mock implements _i5.MyAuthRepoImpl {
  MockMyAuthRepoImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRemoteSource get authRemoteSource =>
      (super.noSuchMethod(
            Invocation.getter(#authRemoteSource),
            returnValue: _FakeAuthRemoteSource_0(
              this,
              Invocation.getter(#authRemoteSource),
            ),
          )
          as _i2.AuthRemoteSource);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>> sendOTP(
    _i8.PhoneNumber? phoneNo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#sendOTP, [phoneNo]),
            returnValue: _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i7.Failure, _i3.Unit>(
                this,
                Invocation.method(#sendOTP, [phoneNo]),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i9.UserEntity>> verifyOTP(
    _i10.PhoneOTP? otp,
    _i8.PhoneNumber? phone,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#verifyOTP, [otp, phone]),
            returnValue:
                _i6.Future<_i3.Either<_i7.Failure, _i9.UserEntity>>.value(
                  _FakeEither_1<_i7.Failure, _i9.UserEntity>(
                    this,
                    Invocation.method(#verifyOTP, [otp, phone]),
                  ),
                ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, _i9.UserEntity>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>.value(
              _FakeEither_1<_i7.Failure, _i3.Unit>(
                this,
                Invocation.method(#signOut, []),
              ),
            ),
          )
          as _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>);

  @override
  _i3.Either<_i7.Failure, _i9.UserEntity> currentuser() =>
      (super.noSuchMethod(
            Invocation.method(#currentuser, []),
            returnValue: _FakeEither_1<_i7.Failure, _i9.UserEntity>(
              this,
              Invocation.method(#currentuser, []),
            ),
          )
          as _i3.Either<_i7.Failure, _i9.UserEntity>);
}

/// A class which mocks [MyCurrentUserAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyCurrentUserAuth extends _i1.Mock implements _i5.MyCurrentUserAuth {
  MockMyCurrentUserAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AuthRepository get auth =>
      (super.noSuchMethod(
            Invocation.getter(#auth),
            returnValue: _FakeAuthRepository_2(this, Invocation.getter(#auth)),
          )
          as _i4.AuthRepository);

  @override
  bool get user =>
      (super.noSuchMethod(Invocation.getter(#user), returnValue: false)
          as bool);
}
