// Mocks generated by Mockito 5.4.5 from annotations
// in dhan_saarthi/test/feature/fund_details/domain/repository/mock_fund_repo.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dhan_saarthi/core/failure.dart' as _i5;
import 'package:dhan_saarthi/feature/fund_detail/domain/enitiies/fund_invest_entity.dart'
    as _i7;
import 'package:dhan_saarthi/feature/fund_detail/domain/enitiies/fund_performace_enity.dart'
    as _i8;
import 'package:dhan_saarthi/feature/fund_detail/domain/enitiies/nav_entity.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

import 'mock_fund_repo.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FundRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockFundRepo extends _i1.Mock implements _i3.FundRepo {
  MockFundRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.NavEntity>> getNavDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getNavDetails, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.NavEntity>>.value(
                  _FakeEither_0<_i5.Failure, _i6.NavEntity>(
                    this,
                    Invocation.method(#getNavDetails, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.NavEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.FundInvestEntity>>
  getFundInvestDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getFundInvestDetails, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i7.FundInvestEntity>>.value(
                  _FakeEither_0<_i5.Failure, _i7.FundInvestEntity>(
                    this,
                    Invocation.method(#getFundInvestDetails, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i7.FundInvestEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.FundPerformaceEnity>>
  getPerformanceDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getPerformanceDetails, []),
            returnValue: _i4.Future<
              _i2.Either<_i5.Failure, _i8.FundPerformaceEnity>
            >.value(
              _FakeEither_0<_i5.Failure, _i8.FundPerformaceEnity>(
                this,
                Invocation.method(#getPerformanceDetails, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i8.FundPerformaceEnity>>);
}
